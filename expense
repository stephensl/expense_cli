#! /usr/bin/env ruby

require "pg"
require "Date"
require "io/console"


class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "finance", user: "postgres", password: "password")
  end 

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on;")
    display_expenses(result)
  end 
  
  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end 

  def find_expense(search_term)
    sql = ("SELECT * FROM expenses WHERE memo ILIKE $1")
    result = @connection.exec_params(sql, ["%#{search_term}%"])
    display_expenses(result)
  end 

  def delete_expense(expense_id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [expense_id])

    if result.ntuples == 1
      sql = ("DELETE FROM expenses WHERE id = $1")
      @connection.exec_params(sql, [expense_id])
      
      puts "The following expense has been deleted:"
      display_expenses(result)
    else 
      puts "There is no expense with the id '#{expense_id}'."
    end 
  end 

  def clear_expenses
    if confirm_clear?
      @connection.exec("DELETE FROM expenses;")
      puts "All expenses have been deleted."
    end
  end 

  private

  def display_expenses(expenses)
    count_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]
  
      puts columns.join(" | ")
    end 
  end 

  def count_expenses(expenses)
    num_of_expenses = expenses.ntuples

    case num_of_expenses
    when 0
      puts "There are no expenses."
    when 1 
      puts "There is 1 expense."
    else 
      puts "There are #{num_of_expenses} expenses."
    end 
  end 

  def total_expense_amount(expenses)
    total = @connection.exec("SELECT SUM(amount) FROM expenses")

  end 

  def confirm_clear?
    puts "This will remove all expenses. Are you sure? (y/n)"
    choice = STDIN.getch

    choice.downcase == 'y' ? true : false 
  end 
  
end 

class CLI
  def initialize
    @application = ExpenseData.new
  end 

  def run(arguments)
    command = arguments.shift
    case command 
    when "add"
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "search"
      search_term = arguments[0]
      abort "You must provide a search term." unless search_term
      @application.find_expense(search_term)
    when "delete"
      expense_id = arguments[0]
      @application.delete_expense(expense_id)
    when "list"
      @application.list_expenses
    when "clear"
      @application.clear_expenses
    else 
      display_help 
    end 
  end 

  def display_help
    puts <<~HELP
      An expense recording system.
  
      Commands:
  
      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end 

CLI.new.run(ARGV)






